from typing import List, Optional, Union, Dict, Any
from pydantic import BaseModel, Field
import time


class ChatMessage(BaseModel):
    role: str = Field(..., description="The role of the message author")
    content: str = Field(..., description="The content of the message")


class ChatCompletionRequest(BaseModel):
    model: str = Field(..., description="ID of the model to use")
    messages: List[ChatMessage] = Field(..., description="A list of messages comprising the conversation so far")
    max_tokens: Optional[int] = Field(None, description="The maximum number of tokens to generate")
    temperature: Optional[float] = Field(1.0, description="What sampling temperature to use")
    top_p: Optional[float] = Field(1.0, description="An alternative to sampling with temperature")
    stream: Optional[bool] = Field(False, description="Whether to stream back partial progress")
    stop: Optional[Union[str, List[str]]] = Field(None, description="Up to 4 sequences where the API will stop generating further tokens")
    frequency_penalty: Optional[float] = Field(0.0, description="Number between -2.0 and 2.0")
    presence_penalty: Optional[float] = Field(0.0, description="Number between -2.0 and 2.0")
    user: Optional[str] = Field(None, description="A unique identifier representing your end-user")


class ChatCompletionChoice(BaseModel):
    index: int = Field(..., description="The index of the choice in the list of choices")
    message: ChatMessage = Field(..., description="A chat completion message generated by the model")
    finish_reason: Optional[str] = Field(None, description="The reason the model stopped generating tokens")


class ChatCompletionUsage(BaseModel):
    prompt_tokens: int = Field(..., description="Number of tokens in the prompt")
    completion_tokens: int = Field(..., description="Number of tokens in the generated completion")
    total_tokens: int = Field(..., description="Total number of tokens used in the request")


class ChatCompletionResponse(BaseModel):
    id: str = Field(..., description="A unique identifier for the chat completion")
    object: str = Field("chat.completion", description="The object type")
    created: int = Field(default_factory=lambda: int(time.time()), description="The Unix timestamp of when the chat completion was created")
    model: str = Field(..., description="The model used for the chat completion")
    choices: List[ChatCompletionChoice] = Field(..., description="A list of chat completion choices")
    usage: ChatCompletionUsage = Field(..., description="Usage statistics for the completion request")


class ChatCompletionStreamChoice(BaseModel):
    index: int = Field(..., description="The index of the choice in the list of choices")
    delta: Dict[str, Any] = Field(default_factory=dict, description="A chat completion delta generated by streamed model responses")
    finish_reason: Optional[str] = Field(None, description="The reason the model stopped generating tokens")


class ChatCompletionStreamResponse(BaseModel):
    id: str = Field(..., description="A unique identifier for the chat completion")
    object: str = Field("chat.completion.chunk", description="The object type")
    created: int = Field(default_factory=lambda: int(time.time()), description="The Unix timestamp of when the chat completion was created")
    model: str = Field(..., description="The model used for the chat completion")
    choices: List[ChatCompletionStreamChoice] = Field(..., description="A list of chat completion choices")


class ModelInfo(BaseModel):
    id: str = Field(..., description="The model identifier")
    object: str = Field("model", description="The object type")
    created: int = Field(default_factory=lambda: int(time.time()), description="The Unix timestamp of when the model was created")
    owned_by: str = Field("transformers-openai-api", description="The organization that owns the model")


class ModelListResponse(BaseModel):
    object: str = Field("list", description="The object type")
    data: List[ModelInfo] = Field(..., description="The list of models")


class ErrorResponse(BaseModel):
    error: Dict[str, Any] = Field(..., description="Error information")
